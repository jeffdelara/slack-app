{"version":3,"sources":["components/FormNotif.js","components/Login.js","components/Signup.js","components/ChannelItems.js","components/SideDirectMessages.js","components/Utils.js","components/Sidebar.js","components/Modal/Modal.js","components/ChannelMessage.js","components/ChannelMessages.js","components/ChannelChat.js","components/Thread.js","components/ChannelCreate.js","components/DirectMessage.js","components/ChannelChatInput.js","components/UserSearchResults.js","components/ComposeMessage.js","components/AddMemberWindow.js","components/Slack.js","App.js","reportWebVitals.js","index.js"],"names":["FormNotif","props","messageType","message","className","Login","setPage","useState","error","setError","id","src","alt","onSubmit","e","preventDefault","email","password","payload","options","method","mode","headers","body","JSON","stringify","fetch","process","then","response","console","log","status","localStorage","clear","setItem","get","json","data","errors","loginToSlack","target","elements","value","type","name","placeholder","href","onClick","Signup","notifMessage","setNotifMessage","notifType","setNotifType","registerUser","confirmPassword","password_confirmation","fullMessages","full_messages","map","confirm_password","ChannelItems","chanList","setChatWindow","setChannelId","setChannelName","changeChannel","channelId","getAttribute","channelName","chans","chan","data-channel-name","data-id","SideDMPerson","pic","receiverId","data-receiver-id","SideDirectMessages","dmList","setdmList","sideDMList","dm","getHeaders","accessToken","getItem","client","expiry","uid","user","parse","Sidebar","setChanList","isLogout","setIsLogout","memberIDs","setMemberIDs","stateMemberMessage","setStateMemberMessage","useEffect","channels","getUserChannels","getMemberList","uniqueMemberIDs","Set","getMembersMessage","userIds","a","membersMessages","forEach","userId","url","messages","length","sender","recvr","receiver","userName","push","filteredArray","member","isExists","list","channelMembers","channel","channel_members","channelMember","includes","user_id","class","Modal","show","onClose","ChannelMessage","userMessage","userPicture","chatDate","ChannelMessages","channelMessages","outChannelMessages","created_at","ChannelChat","counter","setCounter","chatInput","setChatInput","setChannelMessages","ref","useRef","getChannelMessages","timer","setTimeout","clearTimeout","current","scrollIntoView","behavior","setShow","onChange","onKeyPress","key","receiver_id","receiver_class","sendMessage","Thread","setIsThreadOpen","ChannelCreate","setUserId","setHeaders","createChannel","user_ids","trim","title","DirectMessage","receiverName","setMessages","getUserMessages","filteredMessages","item","chatMessages","Object","keys","msg","filteredMessage","ChannelChatInput","SearchItem","setUser","confirmReceiver","UserSearchResults","matchedTerms","results","ComposeMessage","users","setUsers","searchTerm","setSearchTerm","setMatchedTerms","getAllUsers","searchThrottle","fetchedUsers","matchedTerm","filter","userMatch","regex","RegExp","match","autoComplete","AddMemberWindow","addMember","member_id","errorMessages","join","mtype","Slack","isThreadOpen","chatWindow","chat","thread","App","page","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fd996dc.chunk.js","sourcesContent":["import React from 'react';\n\nconst FormNotif = (props) => {\n    // danger or success\n    const { messageType, message } = props;\n\n    return (\n        <div className={messageType}>\n            {message}\n        </div>\n    )\n}\n\nexport default FormNotif;\n","import React, { useState } from \"react\";\nimport FormNotif from \"./FormNotif\";\n\nconst Login = (props) => {\n    const {setPage} = props;\n    const [error, setError] = useState(false);\n    const [messageType, setMessageType] = useState('danger');\n\n    const loginToSlack = (email, password) => {\n        const payload = {\n            email: email, \n            password: password\n        }\n        const options = {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        }\n\n        fetch(`${process.env.REACT_APP_SLACK_ENDPOINT}/auth/sign_in`, options)\n            .then(response => {\n                console.log(response)\n                \n                if(response.status == 200) {\n                    localStorage.clear();\n                    localStorage.setItem('uid', response.headers.get('uid'));\n                    localStorage.setItem('expiry', response.headers.get('expiry'));\n                    localStorage.setItem('access-token', response.headers.get('access-token'));\n                    localStorage.setItem('client', response.headers.get('client'));\n                }\n                return response.json()\n            })\n            .then(data => {\n                console.log(data)\n                if(data.errors) {\n                    setError(data.errors[0]);\n                } else {\n                    setError(false)\n                    localStorage.setItem('user', JSON.stringify(data.data));\n                    setPage('slack');\n                }\n            })\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        const email = e.target.elements.email.value;\n        const password = e.target.elements.password.value;\n\n        loginToSlack(email, password)\n    }\n\n    const goCreateAccount = (e) => {\n        e.preventDefault();\n        setPage('signup');\n    }\n\n    return (\n        <main>\n        <div id=\"login\">\n            <div className=\"form\">\n                <div className=\"logo\"><img src=\"logo.png\" alt=\"\" /> slackvion</div>\n                <h1>Login to your account</h1>\n                {error && <FormNotif messageType=\"danger\" message={error} />}\n                <div className=\"second\">Please enter your work email and password.</div>\n                <form onSubmit={onSubmit}>\n                    <input type=\"email\" name=\"email\" placeholder=\"Email\" />\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\" />\n                    <button type=\"submit\">Login</button>\n                </form>\n                <div className=\"second\">No account yet?<br />\n                    <a href=\"#\" onClick={goCreateAccount}>Click here to create one</a>\n                </div>\n            </div>\n        </div>\n        </main>\n    );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport FormNotif from \"./FormNotif\";\n\nconst Signup = (props) => {\n    const {setPage} = props;\n    const [notifMessage, setNotifMessage] = useState('');\n    const [notifType, setNotifType] = useState(false);\n\n    // go to login page\n    const goLogin = (e) => {\n        e.preventDefault();\n        setPage('login');\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        const email = e.target.elements.email.value;\n        const password = e.target.elements.password.value;\n        const confirmPassword = e.target.elements.confirm_password.value;\n\n        registerUser(email, password, confirmPassword);\n    }\n\n    const registerUser = (email, password, confirmPassword) => {\n        const payload = {\n            email: email,\n            password: password,\n            password_confirmation: confirmPassword\n        }\n\n        const options = {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        }\n        \n        fetch(`${process.env.REACT_APP_SLACK_ENDPOINT}/auth`, options)\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                if(data.status === 'error') {\n                    // what to do if error\n                    const fullMessages = data.errors.full_messages.map(error => {\n                        return <li>{error}</li>\n                    });\n                    setNotifType('danger');\n                    setNotifMessage(fullMessages);\n                } \n                \n                if(data.status === 'success') {\n                    setNotifType('success');\n                    setNotifMessage('Success! You may now login.');\n                }\n            })\n    }\n\n    return (\n        <main>\n            <div id=\"login\">\n                <div className=\"form\">\n                    <div className=\"logo\"><img src=\"logo.png\" alt=\"\" /> slackvion</div>\n                    <h1>Create your account</h1>\n                    {notifType && <FormNotif messageType={notifType} message={notifMessage} />}\n                    <div className=\"second\">We suggest using the email address you use at work.</div>\n                    <form onSubmit={onSubmit}>\n                        <input type=\"email\" name=\"email\" placeholder=\"Email\" />\n                        <input type=\"password\" name=\"password\" placeholder=\"Password\" />\n                        <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm Password\" />\n                        <button type=\"submit\">Create account</button>\n                    </form>\n\n                    <div className=\"second\">\n                        Already using slackvion? <br />\n                        <a href=\"#\" onClick={goLogin}>Click here to login</a>\n                    </div>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Signup;\n","import React, {useEffect, useState} from \"react\";\n\nconst ChannelItems = (props) => {\n    const {chanList, setChatWindow, setChannelId, setChannelName} = props;\n    \n    const changeChannel = (e) => {\n        e.preventDefault();\n        const channelId = +e.target.getAttribute(\"data-id\");\n        const channelName = e.target.getAttribute(\"data-channel-name\");\n        setChatWindow('chat');\n        setChannelId(channelId);\n        setChannelName(channelName);\n    }\n\n    const chans = chanList.map(chan => {\n        return <li><a href=\"#\" onClick={changeChannel} data-channel-name={chan.name} data-id={chan.id}><i className='bx bx-hash'></i> {chan.name}</a></li>\n    });\n\n    return (\n        <>\n            {chans}\n        </>\n    )\n}\n\nexport default ChannelItems;\n","import React, { useEffect } from \"react\";\n\nconst SideDirectMessages = (props) => {\n    const {dmList, setdmList, setChatWindow, setChannelId, setChannelName} = props; \n\n    // get unique keys as name\n    let sideDMList = dmList.map( dm => {\n\n        return <SideDMPerson \n                receiverId={dm.id} \n                pic=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" \n                name={dm.name}\n                setChatWindow={setChatWindow}\n                setChannelId={setChannelId} \n                setChannelName={setChannelName} />\n    })\n\n    return (\n        <ul>\n            {sideDMList}\n        </ul>\n    );\n}\n\nconst SideDMPerson = (props) => {\n    const {pic, name, receiverId, setChatWindow, setChannelId, setChannelName} = props;\n\n    const changeChatWindow = (e) => {\n        e.preventDefault();\n        setChannelId(receiverId);\n        setChannelName(name);\n        setChatWindow('dm');\n    }\n\n    return (\n        <li className=\"dm-item\">\n            <a href=\"#\" data-receiver-id={receiverId} onClick={changeChatWindow}><img src={pic} alt=\"\" /> {name}</a>\n        </li>\n    )\n}\n\nexport default SideDirectMessages\n","export const getHeaders = () => {\n    return {\n        accessToken : localStorage.getItem('access-token'),\n        client : localStorage.getItem('client'),\n        expiry : localStorage.getItem('expiry'),\n        uid : localStorage.getItem('uid'),\n        user : JSON.parse(localStorage.getItem('user'))\n    }; \n}\n","import React, { useEffect, useState } from \"react\";\nimport ChannelItems from \"./ChannelItems\";\nimport SideDirectMessages from \"./SideDirectMessages\";\nimport { getHeaders } from \"./Utils\";\n\nconst Sidebar = (props) => {\n    // setChatWindow choices: 'chat', 'create-chat', 'dm'\n    // setPage choices: 'login', 'slack'\n    const {setChatWindow, setPage, chanList, setChanList, dmList, setdmList, setChannelId, setChannelName} = props;\n\n    const [isLogout, setIsLogout] = useState(false);\n    const [memberIDs, setMemberIDs] = useState([]);\n    const [stateMemberMessage, setStateMemberMessage] = useState([]);\n    const headers = getHeaders();\n\n    const getUserChannels = ({accessToken, client, expiry, uid}) => {\n        const options = {\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                'access-token' : accessToken, \n                'client' : client,\n                'expiry' : expiry, \n                'uid' : uid\n            }\n        }\n\n        fetch(`${process.env.REACT_APP_SLACK_ENDPOINT}/channels`, options)\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                if(data.errors) {\n                    // console.log(data)\n                } else {\n                    // no errors\n                    const channels = data.data;\n                    setChanList([...channels]);\n                    setChannelId(channels[0].id);\n                    setChannelName(channels[0].name);\n                }\n            })\n    }\n\n    const getUserMessages = (user, headers) => {\n        const options = {\n            method: 'GET', \n            mode: 'cors',\n            headers: {\n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages?receiver_id=${user.id}&receiver_class=User`;\n        fetch(url, options)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                console.log(data);\n                const dms = data.data;\n\n                // setdmList([...dms]);\n            })\n    }\n\n    // populate the sidebar\n    useEffect(() => {\n        const { accessToken, client, expiry, uid, user } = getHeaders();\n\n        // get users channels only if all headers exists\n        if(accessToken && client && expiry && uid) {\n            // get user channels only when channel list is not yet loaded\n            getUserChannels({accessToken, client, expiry, uid});\n            // getUserMessages(user, {accessToken, client, expiry, uid});\n        } else {\n            // else go to login page\n            setPage('login'); \n        }\n    }, []);\n\n    // For logout\n    useEffect(() => {\n        if(isLogout) {\n            // delete localstorage\n            localStorage.clear();\n            // go to login page\n            setPage('login');\n        }\n    }, [isLogout])\n\n    useEffect(() => {\n        getMemberList(chanList);\n    }, [chanList]);\n\n    useEffect(() => {\n        const uniqueMemberIDs = [...new Set(memberIDs) ];\n        getMembersMessage(uniqueMemberIDs);\n    }, [memberIDs]);\n\n    const getMembersMessage = async (userIds) => {\n\n        const membersMessages = [];\n\n        userIds.forEach( async userId => {\n            const options = {\n                method: 'GET', \n                mode: 'cors',\n                headers: {\n                    'access-token' : headers.accessToken, \n                    'client' : headers.client, \n                    'expiry' : headers.expiry, \n                    'uid' : headers.uid\n                }\n            }\n    \n            const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages?receiver_id=${userId}&receiver_class=User`;\n\n            const response = await fetch(url, options);\n            const data = await response.json();\n\n            const messages = data.data;\n            console.log(messages);\n            if(messages.length > 0) {\n                const sender = messages[0].sender.uid;\n                const recvr = messages[0].receiver.uid;\n                let userName = '';\n                if(sender === recvr) { \n                    userName = headers.user.uid; \n                } else if (sender === headers.user.uid) {\n                    userName = recvr;\n                } else {\n                    userName = sender;\n                }\n\n                const user = {\n                    id: userId, \n                    name: userName,\n                    messages: messages\n                }\n                \n                \n                membersMessages.push(user);\n                setStateMemberMessage([...membersMessages, user]);\n            }\n            \n        });\n    }\n\n    useEffect(() => {\n\n        let filteredArray = [];\n\n        function isExists(member) {\n            for(const f of filteredArray) {\n                if(f.id === member.id) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        \n        stateMemberMessage.forEach( member => {\n            if(!isExists(member)) {\n                filteredArray.push(member);\n            }\n        });\n        \n        setdmList(filteredArray);\n    }, [stateMemberMessage]);\n\n    const getMemberList = async (list) => {\n        let channelMembers = [];\n\n        list.forEach( async channel => {\n\n            const options = {\n                method: 'GET', \n                mode: 'cors',\n                headers: {\n                    'access-token' : headers.accessToken, \n                    'client' : headers.client, \n                    'expiry' : headers.expiry, \n                    'uid' : headers.uid\n                }\n            }\n\n            const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/channels/${channel.id}`;\n\n            const response = await fetch(url, options);\n            const data = await response.json();\n\n            const channelDetails = data.data; \n\n            channelDetails.channel_members.forEach(channelMember => {\n\n                if(!channelMembers.includes(channelMember.user_id)) {\n                    const userId = channelMember.user_id;\n                    // const value = getMemberMessage(userId);\n                    channelMembers.push(userId);\n                    setMemberIDs([...channelMembers, userId]);\n                }\n            })\n            \n        });\n\n    }\n\n    // handler for creating a channel\n    const createChannel = (e) => {\n        e.preventDefault();\n        // opens the create-chat panel\n        setChatWindow('create-chat');\n    }\n\n\n    const createMessage = (e) => {\n        e.preventDefault();\n        console.log(\"CREATE MESSAGE\", e.target);\n        setChatWindow('compose-message');\n    }\n\n    return (\n        <section id=\"sidebar\">\n            <div id=\"side-header\">\n                <div className=\"container header\">\n                    <h1>Avion School</h1>\n                    <a href=\"#\" onClick={createMessage}>\n                        <i className='bx bx-message-square-edit' id=\"side-create-message\"></i>\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"container\">\n                <div id=\"side-channel-list\">\n                    <a href=\"#\">Channels</a>\n                    <ul>\n                        <ChannelItems \n                            chanList={chanList} \n                            setChatWindow={setChatWindow} \n                            setChannelId={setChannelId}\n                            setChannelName={setChannelName} />\n\n                        <li><a href=\"#\" onClick={createChannel}><i className='bx bxs-plus-square' ></i> Create channels</a></li>\n                    </ul>\n                </div>\n\n                <div id=\"side-direct-messages\" className=\"mt-2\">\n                    <a href=\"#\">Direct messages</a>\n                    <SideDirectMessages \n                        dmList={dmList} \n                        setdmList={setdmList} \n                        setChatWindow={setChatWindow}\n                        setChannelId={setChannelId} \n                        setChannelName={setChannelName} />\n                </div>\n\n                <div className=\"mt-2\"><a href=\"#\" onClick={() => setIsLogout(true)}><i class='bx bx-log-out'></i> Logout</a></div>\n            </div>\n        </section>\n    )\n}\n\nexport default Sidebar;\n","import React from 'react' \r\n\r\nimport './Modal.css';\r\n\r\nconst Modal = props => {\r\n    if (!props.show) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 className=\"modal-title\">USERS</h4>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <li>SEAN DELA CRUZ</li>\r\n                    <li>JEFF DE LARA</li>\r\n                    <li>MAURUS VITOR</li>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button onClick={props.onClose} className=\"button\">Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal ","import React from 'react';\n\nconst ChannelMessage = (props) => {\n\n  const { userName, userMessage, userPicture, chatDate } = props;\n\n  return (\n    <div className=\"channel-message\">\n      <div className=\"sender-pic\"><img src={userPicture} alt=\"\" /></div>\n      <div className=\"sender\">\n          <div className=\"sender-name\">{userName} <span className=\"created\">{chatDate}</span></div>\n          <div className=\"sender-message\">{userMessage}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default ChannelMessage;\n","import React from \"react\";\nimport ChannelMessage from \"./ChannelMessage\";\n\nconst ChannelMessages = (props) => {\n    const {channelMessages} = props;\n\n    let outChannelMessages = false;\n    if(channelMessages) {\n        outChannelMessages = channelMessages.map( message => {\n            return (\n                <ChannelMessage \n                        userName={message.sender.uid}\n                        userMessage={message.body}\n                        chatDate={message.created_at} \n                        userPicture=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" />\n            )\n        })\n    }\n\n    return (\n        <>\n        {channelMessages && outChannelMessages}\n        </>\n    )\n}\n\nexport default ChannelMessages;\n","import React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { getHeaders } from \"./Utils\";\nimport Modal from \"./Modal/Modal\";\nimport ChannelMessages from \"./ChannelMessages\";\nimport { computeHeadingLevel } from \"@testing-library/dom\";\n\nconst ChannelChat = (props) => {\n    const {channelId, channelName, setChatWindow, counter, setCounter} = props; \n    const [messages, setMessages] = useState({});\n    const [chatInput, setChatInput] = useState('');\n    const [channelMessages, setChannelMessages] = useState([]);\n    const ref = useRef();\n    const headers = getHeaders();\n\n    useEffect(() => {\n        getChannelMessages(channelId, headers);\n        console.log(counter);\n        const timer = setTimeout(() => {\n            setCounter(counter + 1);\n            getChannelMessages(channelId, headers);\n        }, 2000);\n\n        return () => {\n            clearTimeout(timer);\n        }\n    }, [channelId, counter]);\n\n    const getChannelMessages = (channelId, headers) => {\n        const options = {\n            method: 'GET', \n            mode: 'cors',\n            headers: {\n                'access-token' : headers.accessToken,  \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages?receiver_id=${channelId}&receiver_class=Channel`;\n        fetch(url, options)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                const messages = data.data;\n                setChannelMessages(() => messages);\n                ref.current.scrollIntoView({ behavior: \"smooth\" });\n            })\n    } \n\n    const [show, setShow] = useState(false);\n    \n    const sendMessage = ({message, channelId, headers}) => {\n\n        const options = {\n            method: 'POST', \n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json', \n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            },\n            body: JSON.stringify({\n                receiver_id: channelId, \n                receiver_class: \"Channel\",\n                body: message \n            })\n        }\n\n        // Send message\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages`;\n\n        fetch(url, options) \n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                console.log(data);\n                if(!data.errors) {\n                    getChannelMessages(channelId, headers);\n                }\n            });\n    }\n\n    const typingChat = (e) => {\n        e.preventDefault();\n        setChatInput(e.target.value);\n    }\n\n    const handleEnter = (e) => {\n        if(e.key === 'Enter') {\n            e.preventDefault();\n            console.log(chatInput);\n            const message = e.target.value;\n            // send message\n            sendMessage({message, channelId, headers});\n\n            e.target.value = '';\n            setChatInput('');\n        }\n    }\n    \n    const addMember = (e) => {\n        console.log('Add member');\n        e.preventDefault();\n        setChatWindow('add-member');\n    }\n\n    return (\n        <section id=\"channel-chat\">\n            <div id=\"channel-header\">\n                <div className=\"container header\">\n                    <h1><i className='bx bx-hash'></i>{channelName}</h1>\n                    <div className=\"channel-options\">\n                        <a href=\"#\" className=\"channel-btn\" onClick={addMember}>+ Add member</a> \n\n                        <div id=\"channel-members\">\n                        <button onClick={() => setShow(true) }>\n                            <img src=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" alt=\"\" />\n                            <img src=\"https://ca.slack-edge.com/T010DU0GZE0-U02C42FABUK-8daed97695af-512\" alt=\"\" />\n                            <img src=\"https://ca.slack-edge.com/T010DU0GZE0-U01CNLJ3J0P-46af7649e68b-512\" alt=\"\" />\n                        </button>\n                            <span className=\"muted\"><Modal onClose={() => setShow(false)} show={show} /></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"channel-chat-content\">\n\n                <ChannelMessages channelMessages={channelMessages} />\n\n                <div ref={ref}></div>\n            </div>\n\n            <div id=\"channel-chat-input\">\n                <div className=\"container\">\n                    <textarea name=\"\" id=\"\"onChange={typingChat} onKeyPress={handleEnter} placeholder=\"Message #announcement\">{chatInput}</textarea>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default ChannelChat;\n","import React from \"react\";\n\nconst Thread = (props) => {\n    // setIsThreadOpen(true or false) it will show or hide thread section\n    const { setIsThreadOpen } = props;\n\n    return (\n        <section id=\"thread\">\n            <div id=\"thread-header\">\n                <div className=\"container header\">\n                    <h1>Thread</h1>\n                    <i className='bx bx-x'></i>\n                </div>\n            </div>\n\n            <div className=\"channel-message\">\n                <div className=\"sender-pic\"><img src=\"https://ca.slack-edge.com/T010DU0GZE0-U01CNLJ3J0P-46af7649e68b-512\" alt=\"\" /></div>\n                <div className=\"sender\">\n                    <div className=\"sender-name\">Maurus Vitor <span className=\"created\">8:01 PM</span></div>\n                    <div className=\"sender-message\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Placeat, enim quis! Dolorum ut neque aliquam atque. Dolores dolorem, similique consectetur necessitatibus ut libero quis ipsam alias. Voluptate error ipsam perferendis.</div>\n                </div>\n            </div>\n\n            <div className=\"thread-divider\">\n                <span className=\"thread-content\">Tuesday, November 9th</span>\n            </div>\n\n            <div className=\"channel-message\">\n                <div className=\"sender-pic\"><img src=\"https://ca.slack-edge.com/T010DU0GZE0-U02C42FABUK-8daed97695af-512\" alt=\"\" /></div>\n                <div className=\"sender\">\n                    <div className=\"sender-name\">Jeff de Lara <span className=\"created\">8:01 PM</span></div>\n                    <div className=\"sender-message\">Good evening! Don't forget to post your standup.</div>\n                </div>\n            </div>\n\n\n            <div id=\"thread-chat-input\">\n                <div className=\"container\">\n                    <textarea name=\"\" id=\"\" placeholder=\"Reply\"></textarea>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Thread;\n","import React, { useState, useEffect } from \"react\";\n\nconst ChannelCreate = (props) => {\n    const {chanList, setChanList} = props;\n    const [userId, setUserId] = useState(null);\n    const [headers, setHeaders] = useState({});\n\n    useEffect(() => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        setUserId(user.id);\n\n        setHeaders({\n            'Content-Type' : 'application/json', \n            'access-token' : localStorage.getItem('access-token'),\n            'client' : localStorage.getItem('client'),\n            'expiry' : localStorage.getItem('expiry'), \n            'uid' : localStorage.getItem('uid')\n        })\n    }, [userId]);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        const channelName = e.target.elements.channelName.value;\n\n        // check if not empty field\n        if(channelName.trim()) {\n            console.log(channelName);\n            createChannel(channelName, userId);\n        }\n    }\n\n    const createChannel = (channelName, userId) => {\n        console.log(channelName, userId);\n\n        const payload = {\n            name: channelName, \n            user_ids: [+userId]\n        }\n\n        const options = {\n            method: 'POST', \n            mode: 'cors', \n            headers: headers,\n            body: JSON.stringify(payload)\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/channels`;\n\n        fetch(url, options)\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                console.log(data);\n                if(data.errors) {\n                    console.log(data);\n                } else {\n                    setChanList([...chanList, data.data]);\n                }\n            })\n    }\n\n    return (\n        <section id=\"channel-chat\">\n            <div id=\"channel-header\">\n                <div className=\"container header\">\n                    <h1><i className='bx bx-hash'></i> Create channel</h1>\n\n                </div>\n            </div>\n\n            <div id=\"channel-chat-content\">\n                <div className=\"container\">\n                    <div className=\"muted\">Type the name of new channel</div>\n                    <form className=\"form form-full\" onSubmit={onSubmit}>\n                        <input type=\"text\" name=\"channelName\" className=\"textbox\" placeholder=\"Channel name\" />\n                    </form>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default ChannelCreate;\n","import React, {useState, useEffect, useRef} from \"react\";\nimport { getHeaders } from \"./Utils\";\n\nconst DirectMessage = (props) => {\n    // channelId is also the receiver_id to be used for fetching API\n    const {channelId, channelName, counter, setCounter} = props;\n    const receiverId = channelId;\n    const receiverName = channelName;\n    const [messages, setMessages] = useState({});\n    const [chatInput, setChatInput] = useState('');\n    const headers = getHeaders();\n    const ref = useRef();\n\n    useEffect(() => {\n        getUserMessages(receiverId, headers);\n        console.log(counter);\n        const timer = setTimeout(() => {\n            setCounter(counter + 1);\n            getUserMessages(receiverId, headers);\n        }, 3000);\n\n        return () => {\n            clearTimeout(timer);\n        }\n    }, [receiverId, counter]);\n\n    const getUserMessages = (receiverId, headers) => {\n        const options = {\n            method: 'GET', \n            mode: 'cors',\n            headers: {\n                'access-token' : headers.accessToken,  \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages?receiver_id=${receiverId}&receiver_class=User`;\n        fetch(url, options)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                const dm = data.data; \n                const filteredMessages = {};\n\n                for(const item of dm) {\n                    filteredMessages[item.id] = {\n                        sender: item.sender.email, \n                        receiver: item.receiver.email, \n                        body: item.body,\n                        created_at: item.receiver.created_at\n                    }\n                }\n\n                setMessages({...filteredMessages});\n                // ref.current.scrollTo({top: ref.current.offsetTop + ref.current.offsetHeight});\n                ref.current.scrollIntoView({ behavior: \"smooth\" });\n            })\n    }\n\n    const chatMessages = Object.keys(messages).map(msg => {\n        return <ChannelMessage \n            title={messages[msg].sender} \n            message={messages[msg].body} \n            created_at={messages[msg].created_at} />\n    })\n\n    // Sending\n    const sendMessage = ({message, receiverId, headers}) => {\n\n        const options = {\n            method: 'POST', \n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json', \n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            },\n            body: JSON.stringify({\n                receiver_id: receiverId, \n                receiver_class: \"User\", \n                body: message \n            })\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages`;\n        \n        fetch(url, options) \n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                if(!data.errors) {\n                    const dm = data.data;\n                    const filteredMessage = {};\n    \n                    filteredMessage[dm.id] = {\n                        sender: headers.user.uid,\n                        receiver: '', \n                        body: dm.body, \n                        created_at: dm.created_at \n                    }\n    \n                    setMessages({...messages, ...filteredMessage});\n                    \n                    // Scroll to bottom\n                    // ref.current.scrollTo({top: ref.current.offsetTop + ref.current.offsetHeight});\n                    ref.current.scrollIntoView({ behavior: \"smooth\" });\n                } else {\n                    console.log(\"There is an error sending message.\");\n                }\n            })\n    }\n\n    const typingChat = (e) => {\n        e.preventDefault();\n        setChatInput(e.target.value);\n    }\n\n    const handleEnter = (e) => {\n        if(e.key === 'Enter') {\n            e.preventDefault();\n            console.log(chatInput);\n            const message = e.target.value;\n            // send message\n            sendMessage({message, receiverId, headers});\n\n            e.target.value = '';\n            setChatInput('');\n        }\n    }\n\n    \n    return (\n        <section id=\"channel-chat\">\n            <div id=\"channel-header\">\n                <div className=\"container header\">\n                    <h1><img src=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" alt=\"\" /> {receiverName}</h1>\n                </div>\n            </div>\n\n            <div id=\"channel-chat-content\">\n                {chatMessages}\n                <div ref={ref}></div>\n            </div>\n\n            <div id=\"channel-chat-input\">\n                <div className=\"container\">\n                    <textarea name=\"\" id=\"\" onChange={typingChat} onKeyPress={handleEnter} placeholder=\"Message #announcement\">{chatInput}</textarea>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nconst ChannelMessage = (props) => {\n    const {title, message, created_at} = props;\n\n    return (\n        <div className=\"channel-message\">\n            <div className=\"sender-pic\"><img src=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" alt=\"\" /></div>\n            <div className=\"sender\">\n                <div className=\"sender-name\">{title} <span className=\"created\">{created_at}</span></div>\n                <div className=\"sender-message\">{message}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default DirectMessage;\n","import React, {useState, useEffect} from \"react\";\nimport { getHeaders } from \"./Utils\";\n\nconst ChannelChatInput = (props) => {\n    const {receiverId, setChatWindow, setChannelId, setChannelName} = props;\n    const [chatInput, setChatInput] = useState('');\n    const [messages, setMessages] = useState({});\n    const headers = getHeaders();\n\n    const typingChat = (e) => {\n        e.preventDefault();\n        setChatInput(e.target.value);\n    }\n\n    const handleEnter = (e) => {\n        if(e.key === 'Enter') {\n            e.preventDefault();\n            console.log(chatInput);\n            const message = e.target.value;\n            // send message\n            sendMessage({message, receiverId, headers});\n\n            e.target.value = '';\n            setChatInput('');\n        }\n    }\n\n     // Sending\n     const sendMessage = ({message, receiverId, headers}) => {\n\n        const options = {\n            method: 'POST', \n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json', \n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            },\n            body: JSON.stringify({\n                receiver_id: receiverId, \n                receiver_class: \"User\", \n                body: message \n            })\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/messages`;\n        \n        fetch(url, options) \n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                if(!data.errors) {\n                    const dm = data.data;\n                    console.log(\"CHAN CHAT INPUT: \", dm);\n                    setChannelId(receiverId);\n                    setChannelName(headers.user.uid);\n                    setChatWindow('dm');\n                    // \n                } else {\n                    console.log(\"There is an error sending message.\");\n                }\n            })\n    }\n\n    return (\n        <div id=\"channel-chat-input\">\n            <div className=\"container\">\n                <textarea name=\"\" id=\"\" onChange={typingChat} onKeyPress={handleEnter} \n                placeholder=\"Message #announcement\">{chatInput}</textarea>\n            </div>\n        </div>\n    )\n}\n\nexport default ChannelChatInput;\n","import React from \"react\";\n\nconst UserSearchResults = (props) => {\n    const {matchedTerms, setUser} = props; \n    const searchResults = matchedTerms;\n\n    const results = searchResults.map(user => {\n        return <SearchItem name={user.email} setUser={setUser} id={user.id} />\n    });\n\n    return (\n        <>\n        {results}\n        </>\n    )\n}\n\nconst SearchItem = (props) => {\n    const { id, name, setUser } = props;\n\n    const confirmReceiver = (e, id) => {\n        e.preventDefault();\n        console.log(id);\n        setUser({id, name});\n    }\n\n    return (\n        <div className=\"channel-message\" key={id}>\n            <div className=\"sender-pic\"><img src=\"https://a.slack-edge.com/d4111/img/apps/workflows_192.png\" alt=\"\" /></div>\n            <div className=\"sender\">\n                <div className=\"sender-name\"><a href=\"#\" onClick={(e) => confirmReceiver(e, id)}>{name}</a></div>\n                <div className=\"muted\">ID: {name}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserSearchResults;\n","import React, { useEffect, useState } from \"react\";\nimport ChannelChatInput from \"./ChannelChatInput\";\nimport { getHeaders } from \"./Utils\";\nimport UserSearchResults from \"./UserSearchResults\";\n\nconst ComposeMessage = (props) => {\n    const {setChannelId, setChannelName, setChatWindow} = props;\n    // array of users from api\n    const [users, setUsers] = useState([]);\n    \n    // picked user\n    const [user, setUser] = useState(false);\n    // the result of searched users\n    const [searchTerm, setSearchTerm] = useState('');\n    const [matchedTerms, setMatchedTerms] = useState([]);\n    const headers = getHeaders();\n\n    useEffect(() => {\n        // Get all users\n        getAllUsers();\n    }, []);\n\n\n    const getAllUsers = () => {\n        const options = {\n            headers: {\n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/users`;\n\n        fetch(url, options)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                const fetchedUsers = data.data.map(user => {\n                    return { id: user.id, uid: user.uid, email: user.email }\n                })\n                setUsers(fetchedUsers);\n            })\n    }\n    \n    let searchThrottle;\n\n    const typingUser = (e) => {\n        // typing / searching for user\n        clearTimeout(searchThrottle);\n        const searchTerm = e.target.value;\n        setSearchTerm(searchTerm);\n    }\n\n    useEffect(() => {\n\n        if(searchTerm === '') {\n            setMatchedTerms([]);\n            return;\n        }\n\n        \n        searchThrottle = setTimeout(() => {\n            // search using regex for Symbol\n            let matchedTerm = users.filter(userMatch => {\n                const reg1 = \"[a-zA-Z0-9]*\";\n                const regex = new RegExp(searchTerm + reg1);\n                return userMatch.email.match(regex);\n            });\n\n            setMatchedTerms(matchedTerm);    \n        }, 500);\n\n        \n    }, [searchTerm])\n\n    const resetCompose = (e) => {\n        e.preventDefault();\n        setUser(false);\n    }\n\n    return (\n        <section id=\"channel-chat\">\n            <div id=\"channel-header\">\n                <div className=\"container header\">\n                    <h1><i className='bx bx-message-square-edit'></i> Compose message</h1>\n\n                </div>\n            </div>\n\n            <div id=\"channel-chat-content\">\n                <div className=\"container\">\n                    <div className=\"muted\">Send message to:</div>\n                    { user &&  <div className=\"user-to\">{user.name} <a href=\"#\" onClick={resetCompose}>x</a></div>}\n                    { !user && <input type=\"text\" onChange={typingUser} value={searchTerm} name=\"channelName\" className=\"textbox\" placeholder=\"Search user...\" autoComplete=\"off\" />}\n                    { !user && <div className=\"mt\">\n                        <UserSearchResults matchedTerms={matchedTerms} setUser={setUser} />\n                    </div> }\n                </div>\n            </div>\n\n            {user && <ChannelChatInput receiverId={user.id} \n                receiverName={user.name} \n                setChatWindow={setChatWindow} \n                setChannelId={setChannelId} \n                setChannelName={setChannelName} />}\n        </section>\n    )\n}\n\n\nexport default ComposeMessage;\n","import React, {useState, useEffect} from \"react\";\nimport { getHeaders } from \"./Utils\";\nimport UserSearchResults from \"./UserSearchResults\";\nimport FormNotif from \"./FormNotif\";\n\nconst AddMemberWindow = (props) => {\n    const {channelId, setChatWindow, channelName} = props;\n    // array of users from api\n    const [users, setUsers] = useState([]);\n    // picked user\n    const [user, setUser] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [matchedTerms, setMatchedTerms] = useState([]);\n    const [error, setError] = useState(false);\n\n    const headers = getHeaders();\n    // get all users\n    useEffect(() => {\n        // Get all users\n        getAllUsers();\n    }, []);\n\n\n    const getAllUsers = () => {\n        const options = {\n            headers: {\n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }\n        }\n\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/users`;\n\n        fetch(url, options)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                const fetchedUsers = data.data.map(user => {\n                    return { id: user.id, uid: user.uid, email: user.email }\n                })\n                setUsers(fetchedUsers);\n            })\n    }\n    \n    let searchThrottle;\n\n    const typingUser = (e) => {\n        // typing / searching for user\n        clearTimeout(searchThrottle);\n        const searchTerm = e.target.value;\n        setSearchTerm(searchTerm);\n    }\n\n    useEffect(() => {\n\n        if(searchTerm === '') {\n            setMatchedTerms([]);\n            return;\n        }\n\n        \n        searchThrottle = setTimeout(() => {\n            // search using regex for Symbol\n            let matchedTerm = users.filter(userMatch => {\n                const reg1 = \"[a-zA-Z0-9]*\";\n                const regex = new RegExp(searchTerm + reg1);\n                return userMatch.email.match(regex);\n            });\n\n            setMatchedTerms(matchedTerm);    \n        }, 500);\n\n        \n    }, [searchTerm])\n\n    const resetCompose = (e) => {\n        e.preventDefault();\n        setUser(false);\n    }\n\n    const confirmAdd = (e) => {\n        e.preventDefault();\n        console.log(\"ADD\", user);\n        // add user\n        addMember(user.id);\n    }\n\n    const addMember = async (id) => {\n        const url = `${process.env.REACT_APP_SLACK_ENDPOINT}/channel/add_member`;\n        const payload = { id: channelId, member_id: id };\n        const options = {\n            method: 'POST', \n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json', \n                'access-token' : headers.accessToken, \n                'client' : headers.client, \n                'expiry' : headers.expiry, \n                'uid' : headers.uid\n            }, \n            body: JSON.stringify(payload)\n        }\n        const response = await fetch(url, options);\n        const data = await response.json();\n        console.log(data);\n        if(!data.errors) {\n            // success\n            setError({message: \"User added to channel.\", mtype: 'success'});\n        } else {\n            console.log(data.errors);\n            const errorMessages = data.errors.join(\" \");\n            setError({message: errorMessages, mtype: 'danger'});\n        }\n    }\n\n    useEffect(() => {\n        if(!user) {\n            setError(false);\n        }\n    }, [user]);\n\n    return (\n        <section id=\"channel-chat\">\n            <div id=\"channel-header\">\n                <div className=\"container header\">\n                    <h1><i className='bx bx-message-square-edit'></i> Add member</h1>\n                </div>\n            </div>\n\n            <div id=\"channel-chat-content\">\n                <div className=\"container\">\n                <div className=\"muted\">Select a user to add to channel <strong>@{channelName}</strong></div>\n                <div>{error && <FormNotif messageType={error.mtype} message={error.message} />}</div>\n                { user &&  <div className=\"user-to\">{user.name} <a href=\"#\" onClick={resetCompose}>x</a></div>}\n                    { !user && <input type=\"text\" onChange={typingUser} value={searchTerm} name=\"channelName\" className=\"textbox\" placeholder=\"Search user...\" autoComplete=\"off\" />}\n                    { !user && <div className=\"mt\">\n                        <UserSearchResults matchedTerms={matchedTerms} setUser={setUser} />\n                        \n                    </div> }\n\n                {user && <div><a href=\"#\" className=\"btn\" onClick={confirmAdd}>Confirm add</a></div>}\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default AddMemberWindow;\n","import React, { useState, useEffect } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport ChannelChat from \"./ChannelChat\";\nimport Thread from \"./Thread\";\nimport ChannelCreate from \"./ChannelCreate\";\nimport DirectMessage from \"./DirectMessage\";\nimport ComposeMessage from \"./ComposeMessage\";\nimport AddMemberWindow from \"./AddMemberWindow\";\n\nconst Slack = (props) => {\n    const {setPage} = props;\n    const [isThreadOpen, setIsThreadOpen] = useState(false);\n    const [chatWindow, setChatWindow] = useState('chat'); // chat, create-chat, dm\n    const [channelId, setChannelId] = useState(0);\n    const [channelName, setChannelName] = useState('');\n    \n\n    // sidebar states\n    // contains array of channels that i joined\n    const [chanList, setChanList] = useState([]);\n    // contains array of users who dm with me\n    const [dmList, setdmList] = useState([]);\n\n    const [counter, setCounter] = useState(0);\n\n    let chat = <ChannelChat setIsThreadOpen={setIsThreadOpen} />\n\n    if(chatWindow === 'chat') {\n        chat = <ChannelChat \n            setIsThreadOpen={setIsThreadOpen} \n            setChatWindow={setChatWindow} \n            channelId={channelId} \n            counter={counter} \n            setCounter={setCounter}\n            channelName={channelName} />\n    }\n\n    if(chatWindow === 'create-chat') {\n        chat = <ChannelCreate chanList={chanList} setChanList={setChanList} />\n    }\n\n    if(chatWindow === 'dm') {\n        // send the user id as channelId\n        chat = <DirectMessage channelId={channelId} counter={counter} setCounter={setCounter} channelName={channelName} />\n    }\n\n    if(chatWindow === 'compose-message') {\n        // set channel id & name once the user has composed the message\n        chat = <ComposeMessage \n            setChannelId={setChannelId} \n            setChannelName={setChannelName} \n            setChatWindow={setChatWindow} />\n    }\n\n    if(chatWindow === 'add-member') {\n        chat = <AddMemberWindow channelId={channelId} channelName={channelName} setChatWindow={setChatWindow} />\n    }\n\n    const thread = isThreadOpen && <Thread setIsThreadOpen={setIsThreadOpen} />\n    \n    return (\n        <main>\n            <Sidebar setChatWindow={setChatWindow} \n                setPage={setPage} \n                chanList={chanList} \n                setChanList={setChanList} \n                dmList={dmList}\n                setdmList={setdmList} \n                setChannelId={setChannelId} \n                setChannelName={setChannelName} />\n            {chat}\n            {thread}\n        </main>\n    )\n}\n\nexport default Slack;\n","import React, { useEffect, useState } from 'react';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport Slack from './components/Slack';\nimport './App.css';\n\nfunction App() {\n  const [page, setPage] = useState('login');  \n\n  // check if already logged in\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n\n    if(user) {\n      setPage('slack'); \n    }\n  });\n\n  if(page === 'login') {\n    return <Login setPage={setPage} />\n  }\n\n  if(page === 'signup') {\n    return <Signup setPage={setPage} />\n  }\n\n  if(page === 'slack') {\n    return <Slack setPage={setPage} />\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}